(library-directories (cons "." (library-directories)))
(optimize-level 3)
(import (gobble)
        (euler))

(define (etude N)
  (random-seed 2) ; "reproducible" idk
  (let walk ((N N) (ls '()))
    (if (zero? N)
        (map (lambda (len/freq)
               `(,(car len/freq) ,(length len/freq)))
             (group-with = (sort < ls)))
        (let* ((board (list->string (roll (list-head (shuffle dice-5x5) 16))))
               (board-file (string-append dir "/" board))
               (solution (gobble board))
               (n (if (null? solution)
                      0
                      (min 8 (string-length (caar (last-pair solution)))))))
          (walk (1- N) (cons n ls))))))

(define (output-results results N)
  (for-each (lambda (n.f)
              (format #t "~2a ~,2f~%" (car n.f) (/ (cadr n.f) N)))
            results))

(define (report-it N)
  (define out-file "../report/freq.txt")
  (define results (etude N))
  (when (file-exists? out-file)
    (delete-file out-file))
  (output-results results N)
  (with-output-to-file out-file
    (lambda ()
      (for-each (lambda (n.f)
                  (apply format #t "~a ~a~%" n.f))
                results))))
